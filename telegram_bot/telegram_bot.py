import asyncio
import sqlite3
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH ='/root/telegram_watcher/telegram_bot/create.db/db/event_status.db'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TELEGRAM_TOKEN = '8138626595:AAFu3zUR8HqvZag9j1FYbj9BnQfIqRQR7xg'
GROUP_CHAT_ID = -1002688502308

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def get_event_status():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT status, updated_at FROM status ORDER BY rowid DESC LIMIT 1")
    result = c.fetchone()
    conn.close()
    if result:
        status, updated_at = result
        return status, updated_at
    else:
        return None, None

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def private_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type == 'private':
        await update.message.reply_text("üîí –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Ç–∞–º!")

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start01
async def start01_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type in ['group', 'supergroup']:
        await update.message.reply_text("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏–π!")

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /status
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type in ['group', 'supergroup']:
        status, updated_at = get_event_status()
        if status:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥
            if updated_at:
                dt = datetime.fromisoformat(updated_at)
                updated_str = dt.strftime('%d.%m.%Y %H:%M')
                await update.message.reply_text(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è: {status}\nüïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_str}")
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è: {status}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def monitor_db(application: Application):
    await asyncio.sleep(5)  # –ñ–¥–µ–º —á—É—Ç—å-—á—É—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω.")

    last_status, _ = get_event_status()

    # –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if last_status == "SOLD OUT":
        await application.bot.send_message(chat_id=GROUP_CHAT_ID, text="üî¥ –°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ SOLD OUT.")

    while True:
        current_status, _ = get_event_status()

        if last_status == "SOLD OUT" and current_status == "BUY TICKETS":
            await application.bot.send_message(chat_id=GROUP_CHAT_ID, text="üéâ –ë–∏–ª–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã! –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ BUY TICKETS!")

        last_status = current_status
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start01", start01_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.ChatType.PRIVATE, private_message_handler))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã
    application.job_queue.run_once(lambda context: asyncio.create_task(monitor_db(application)), when=0)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()

